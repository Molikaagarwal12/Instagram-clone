// File generated by FlutterFire CLI.
// ignore_for_file: lines_longer_than_80_chars, avoid_classes_with_only_static_members
import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
import 'package:flutter_dotenv/flutter_dotenv.dart';

import 'package:flutter/foundation.dart'
    show defaultTargetPlatform, kIsWeb, TargetPlatform;

class DefaultFirebaseOptions {
  static final String apiKeyAndroid = dotenv.env["apiKeyAndroid"]!;
  static final String apiKeyIos = dotenv.env["apiKeyIos"]!;
  static final String apiKeyMacOs = dotenv.env["apiKeyMacOs"]!;
  static final String apiKeyWeb = dotenv.env["apiKeyWeb"]!;
  static final String appIdAndroid = dotenv.env["appIdAndroid"]!;
  static final String appIdIos = dotenv.env["appIdIos"]!;
  static final String appIdMacOs = dotenv.env["appIdMacOs"]!;
  static final String appIdWeb = dotenv.env["appIdWeb"]!;
  static final String messagingSenderId = dotenv.env["messagingSenderId"]!;
  static final String projectId = dotenv.env["projectId"]!;
  static final String measurementId = dotenv.env["measurementId"]!;
  static final String authDomain = dotenv.env["authDomain"]!;
  static final String storageBucket = dotenv.env["storageBucket"]!;
  static final String iosClientIdIos = dotenv.env["iosClientIdIos"]!;
  static final String iosBundleIdIos = dotenv.env["iosBundleIdIos"]!;
  static final String iosClientIdMacOs = dotenv.env["iosClientIdMacOs"]!;
  static final String iosBundleIdMacOs = dotenv.env["iosBundleIdMacOs"]!;

  // static final String apiKeyAndroid = dotenv.env["API_KEY_ANDROID"]!;
  // static final String apiKeyIos = dotenv.env["API_KEY_IOS"]!;
  // static final String apiKeyMacOs = dotenv.env["API_KEY_MAC_OS"]!;
  // static final String apiKeyWeb = dotenv.env["API_KEY_WEB"]!;
  // static final String appIdAndroid = dotenv.env["APP_ID_ANDROID"]!;
  // static final String appIdIos = dotenv.env["APP_ID_IOS"]!;
  // static final String appIdMacOs = dotenv.env["APP_ID_MAC_OS"]!;
  // static final String appIdWeb = dotenv.env["APP_ID_WEB"]!;
  // static final String messagingSenderId = dotenv.env["MESSAGING_SENDER_ID"]!;
  // static final String projectId = dotenv.env["PROJECT_ID"]!;
  // static final String measurementId = dotenv.env["MEASUREMENT_ID"]!;
  // static final String authDomain = dotenv.env["AUTH_DOMAIN"]!;
  // static final String storageBucket = dotenv.env["STORAGE_BUCKET"]!;
  // static final String iosClientIdIos = dotenv.env["IOS_CLIENT_ID_IOS"]!;
  // static final String iosBundleIdIos = dotenv.env["IOS_BUNDLE_ID_IOS"]!;
  // static final String iosClientIdMacOs = dotenv.env["IOS_CLIENT_ID_MAC_OS"]!;
  // static final String iosBundleIdMacOs = dotenv.env["IOS_BUNDLE_ID_MAC_OS"]!;

  static FirebaseOptions get currentPlatform {
    if (kIsWeb) {
      return web;
    }
    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
        return android;
      case TargetPlatform.iOS:
        return ios;
      case TargetPlatform.macOS:
        return macos;
      case TargetPlatform.windows:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for windows - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      case TargetPlatform.linux:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for linux - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      default:
        throw UnsupportedError(
          'DefaultFirebaseOptions are not supported for this platform.',
        );
    }
  }

  static final FirebaseOptions web = FirebaseOptions(
    apiKey: apiKeyWeb,
    appId: appIdWeb,
    messagingSenderId: messagingSenderId,
    projectId: projectId,
    storageBucket: storageBucket,
    measurementId: measurementId,
    authDomain: authDomain,
  );

  static final FirebaseOptions android = FirebaseOptions(
    apiKey: apiKeyAndroid,
    appId: appIdAndroid,
    messagingSenderId: messagingSenderId,
    projectId: projectId,
    storageBucket: storageBucket,
  );

  static final FirebaseOptions ios = FirebaseOptions(
    apiKey: apiKeyIos,
    appId: appIdIos,
    messagingSenderId: messagingSenderId,
    projectId: projectId,
    storageBucket: storageBucket,
    iosClientId: iosClientIdIos,
    iosBundleId: iosBundleIdIos,
  );

  static final FirebaseOptions macos = FirebaseOptions(
    apiKey: apiKeyMacOs,
    appId: appIdMacOs,
    messagingSenderId: messagingSenderId,
    projectId: projectId,
    storageBucket: storageBucket,
    iosClientId: iosClientIdMacOs,
    iosBundleId: iosBundleIdMacOs,
  );
}